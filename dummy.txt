@Component
public class RuleDocGenerator {

    @Value("classpath:validation.yml")
    private Resource validationRulesFile;

    @Value("classpath:user-validation.yml")
    private Resource fieldRulesFile;

    public String generateHtmlDocumentation() throws IOException {
        Yaml yaml = new Yaml();

        ValidationRuleConfig validationConfig;
        FieldValidationConfig fieldConfig;

        try (InputStream vr = validationRulesFile.getInputStream()) {
            validationConfig = yaml.loadAs(vr, ValidationRuleConfig.class);
        }

        try (InputStream fr = fieldRulesFile.getInputStream()) {
            fieldConfig = yaml.loadAs(fr, FieldValidationConfig.class);
        }

        StringBuilder html = new StringBuilder();
        html.append("<html><head><title>Validation Rules</title></head><body>");
        html.append("<h1>Reusable Rules</h1><ul>");

        for (Map.Entry<String, RuleDefinition> entry : validationConfig.getRules().entrySet()) {
            RuleDefinition rule = entry.getValue();
            html.append("<li><b>").append(entry.getKey()).append("</b>: ")
                .append(rule.getDescription()).append("<br/>")
                .append("Error: ").append(rule.getErrorMessage()).append("<br/>")
                .append("Severity: ").append(rule.getSeverity()).append("<br/>")
                .append("Enabled: ").append(rule.isEnabled()).append("<br/>")
                .append("Params: ").append(rule.getParams()).append("</li><br/>");
        }

        html.append("</ul><h1>Per-field Rules</h1>");

        for (Map.Entry<String, List<String>> entry : fieldConfig.getFields().entrySet()) {
            html.append("<h3>").append(entry.getKey()).append("</h3><ul>");
            for (String ruleName : entry.getValue()) {
                RuleDefinition rule = validationConfig.getRules().get(ruleName);
                if (rule != null) {
                    html.append("<li><b>").append(rule.getName()).append("</b>: ")
                        .append(rule.getDescription()).append("<br/>")
                        .append("Error: ").append(rule.getErrorMessage()).append("<br/>")
                        .append("Severity: ").append(rule.getSeverity()).append("<br/>")
                        .append("Params: ").append(rule.getParams()).append("</li><br/>");
                }
            }
            html.append("</ul>");
        }

        html.append("</body></html>");
        return html.toString();
    }
}
---------------------

@RestController
@RequestMapping("/docs")
public class RuleDocController {

    private final RuleDocGenerator generator;

    public RuleDocController(RuleDocGenerator generator) {
        this.generator = generator;
    }

    @GetMapping(value = "/rules", produces = MediaType.TEXT_HTML_VALUE)
    public String getRulesDoc() throws IOException {
        return generator.generateHtmlDocumentation();
    }
}
