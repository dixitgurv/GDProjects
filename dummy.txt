package com.example.engine;

import com.example.config.ValidationConfigProperties;
import com.example.config.ValidationConfigProperties.RuleDefinition;
import com.example.model.DbUser;
import com.example.model.ElementSchemaDto;
import com.example.model.UserDto;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.SpelParserConfiguration;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.stereotype.Component;

import java.lang.reflect.Field;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * ‚úÖ This validator runs at startup and ensures:
 * - SpEL syntax is correct
 * - Property paths in logicExpression actually exist
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class LogicExpressionValidator {

    private final ValidationConfigProperties validationConfigProperties;

    private final ExpressionParser parser = new SpelExpressionParser(
            new SpelParserConfiguration(true, true));

    // Regex to capture: request.address.city, db.name, allElements[].columnName
    private static final Pattern FIELD_PATTERN = Pattern.compile(
            "(request|db|allElements(?:\\[\\])?)\\.(\\w+(?:\\.\\w+)*)"
    );

    @PostConstruct
    public void validateLogicExpressions() {
        log.info("üîç Validating logic expressions in validation.yml...");

        validationConfigProperties.getRules().forEach((ruleName, rule) -> {
            String logicExpression = rule.getLogicExpression();
            if (logicExpression != null && !logicExpression.trim().isEmpty()) {
                // 1. Syntax validation
                try {
                    parser.parseExpression(logicExpression);
                    log.info("‚úÖ Valid syntax for rule '{}': {}", ruleName, logicExpression);
                } catch (Exception ex) {
                    throw new IllegalStateException("‚ùå Invalid SpEL syntax in rule '" + ruleName +
                            "': " + logicExpression, ex);
                }

                // 2. Semantic property path validation
                validateFieldsInExpression(ruleName, logicExpression);
            }
        });

        log.info("‚úÖ All logic expressions validated successfully.");
    }

    private void validateFieldsInExpression(String ruleName, String expression) {
        Matcher matcher = FIELD_PATTERN.matcher(expression);

        while (matcher.find()) {
            String object = matcher.group(1);      // request, db, or allElements[]
            String fieldPath = matcher.group(2);   // address.city or columnName

            boolean exists;
            switch (object) {
                case "request":
                    exists = doesFieldPathExist(UserDto.class, fieldPath);
                    if (!exists) {
                        throw new IllegalStateException(String.format(
                                "‚ùå Invalid field path 'request.%s' in rule '%s' logicExpression: %s",
                                fieldPath, ruleName, expression));
                    }
                    break;
                case "db":
                    exists = doesFieldPathExist(DbUser.class, fieldPath);
                    if (!exists) {
                        throw new IllegalStateException(String.format(
                                "‚ùå Invalid field path 'db.%s' in rule '%s' logicExpression: %s",
                                fieldPath, ruleName, expression));
                    }
                    break;
                case "allElements[]":
                    exists = doesFieldPathExist(ElementSchemaDto.class, fieldPath);
                    if (!exists) {
                        throw new IllegalStateException(String.format(
                                "‚ùå Invalid field path 'allElements[].%s' in rule '%s' logicExpression: %s",
                                fieldPath, ruleName, expression));
                    }
                    break;
                default:
                    throw new IllegalStateException("Unknown context object: " + object);
            }
        }
    }

    private boolean doesFieldPathExist(Class<?> clazz, String fieldPath) {
        String[] parts = fieldPath.split("\\.");
        Class<?> currentClass = clazz;

        for (String part : parts) {
            if (part.endsWith("[]")) {
                part = part.substring(0, part.length() - 2);
                Optional<Class<?>> collectionType = getCollectionElementType(currentClass, part);
                if (collectionType.isEmpty()) {
                    return false;
                }
                currentClass = collectionType.get();
            } else {
                Optional<Class<?>> fieldType = getFieldType(currentClass, part);
                if (fieldType.isEmpty()) {
                    return false;
                }
                currentClass = fieldType.get();
            }
        }

        return true;
    }

    private Optional<Class<?>> getFieldType(Class<?> clazz, String fieldName) {
        while (clazz != null && clazz != Object.class) {
            try {
                Field field = clazz.getDeclaredField(fieldName);
                return Optional.of(field.getType());
            } catch (NoSuchFieldException ignored) {
                clazz = clazz.getSuperclass();
            }
        }
        return Optional.empty();
    }

    private Optional<Class<?>> getCollectionElementType(Class<?> clazz, String fieldName) {
        Optional<Class<?>> fieldType = getFieldType(clazz, fieldName);
        if (fieldType.isPresent()) {
            Class<?> type = fieldType.get();
            if (Collection.class.isAssignableFrom(type)) {
                // For simplicity ‚Äî you could enhance this to infer generic type
                return Optional.of(Object.class);
            }
        }
        return Optional.empty();
    }
}
